name: CI MLOps

on:
  push:
    branches: dev

defaults:
  run:
    working-directory: ./

jobs:
  configure-service-account:
    runs-on: ubuntu-latest
    steps:
      - name: Configure GCP Credentials
        uses: nightstory/gcp-secrets-action@v1
        with:
          gcp_credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
          template_file: ./.github/template.yaml

      - uses: actions/checkout@v4

  authenticate-to-GCP:
    runs-on: ubuntu-latest

    permissions:
    contents: 'read'
    id-token: 'write'

    steps:
      - uses: 'actions/checkout@v4'

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: 'projects/343693069423/locations/global/workloadIdentityPools/github/providers/mlops'
          service_account: 'model-884@mlops-413215.iam.gserviceaccount.com'


  code-quality:
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Linting
        run: |
            pip install pycodestyle==2.11.1 isort==5.13.2
            pycodestyle . --exclude=.venv --max-line-length=120 --indent-size=4

  build-image:
    runs-on: ubuntu-latest
    needs: [configure-service-account, authenticate-to-GCP]
    env:
      GCS_TRAINED_MODELS_BUCKET_URI: ${{ vars.GCS_TRAINED_MODELS_BUCKET_URI }}

    steps:
      - name: Secrets to File
        uses: mobiledevops/secret-to-file-action@v1
        with:
          base64-encoded-secret: ${{ secrets.GCP_CREDENTIALS_JSON }}
          filename: "gcp-credentials.json"
          is-executable: true
          working-directory: "./"

      - name: Build Docker Image
        run: |
            echo "Trained Models Bucket URI: $GCS_TRAINED_MODELS_BUCKET_URI"

            COMMIT_HASH=$(git rev-parse --short HEAD)
            IMAGE_TAG=$(git describe --tags --always)

            echo "Commit Hash: $COMMIT_HASH"
            echo "Image Tag: $IMAGE_TAG"

            docker buildx build \
              --progress auto \
              --build-arg GCP_CREDENTIALS_JSON=gcp-credentials.json \
              --build-arg GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}" \
              --build-arg GCS_TRAINED_MODELS_BUCKET_URI="$GCS_TRAINED_MODELS_BUCKET_URI" \
              --build-arg ELASTIC_APM_SERVER_URL="${{ secrets.ELASTIC_APM_SERVER_URL }}" \
              --build-arg ELASTIC_APM_SECRET_TOKEN="${{ secrets.ELASTIC_APM_SECRET_TOKEN }}" \
              --tag inference:latest \
              --tag inference:$IMAGE_TAG \
              --tag inference:$COMMIT_HASH \
              -f Dockerfile .

            # Save the built Docker image as an artifact
            docker save inference:latest > inference_latest.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v2
        with:
          name: docker-images
          path: |
            inference_latest.tar

  # push-image-to-GAR:
  #   runs-on: ubuntu-latest
  #   needs: build-image
  #   env:
  #     GCR_HOST: ${{ vars.GCR_HOST }}
  #     GCR_REPOSITORY: ${{ vars.GCR_REPOSITORY }}

  #   # permissions:
  #   #   contents: 'read'
  #   #   id-token: 'write'

  #   steps:
  #     # - name: Checkout Reposiotry
  #     #   uses: actions/checkout@v4
  #     #   with:
  #     #     repository: ${{ github.repository }}
  #     #     ref: ${{ github.ref }}

  #     # - name: Configure GCP Credentials
  #     #   uses: nightstory/gcp-secrets-action@v1
  #     #   with:
  #     #     gcp_credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
  #     #     template_file: ./.github/template.yaml
      
  #     # - name: Authenticate to Google Cloud
  #     #   id: 'auth'
  #     #   uses: 'google-github-actions/auth@v2'
  #     #   with:
  #     #     project_id: ${{ secrets.GCP_PROJECT_ID }}
  #     #     workload_identity_provider: 'projects/343693069423/locations/global/workloadIdentityPools/github/providers/mlops'
  #     #     service_account: 'model-884@mlops-413215.iam.gserviceaccount.com'

  #     - name: Secrets to File
  #       uses: mobiledevops/secret-to-file-action@v1
  #       with:
  #         base64-encoded-secret: ${{ secrets.GCP_CREDENTIALS_JSON }}
  #         filename: "gcp-credentials.json"
  #         is-executable: true
  #         working-directory: "./"

  #     - name: Download Docker image artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: docker-images
  #         path: /tmp/docker-images

  #     - name: Load Docker images
  #       run: |
  #         docker load -i /tmp/docker-images/inference_latest.tar

  #     - name: Push Docker Image to GCR
  #       run: |
  #           echo "GCR Host: $GCR_HOST"
            
  #           docker tag inference:latest $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference:latest
            
  #           docker images | grep inference
  #           gcloud auth activate-service-account --key-file=gcp-credentials.json
  #           gcloud auth configure-docker $GCR_HOST -q
  #           docker push $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference

  # deploy-on-cloud-run:
  #   runs-on: ubuntu-latest
  #   env:
  #     GCR_HOST: ${{ vars.GCR_HOST }}
  #     GCR_REPOSITORY: ${{ vars.GCR_REPOSITORY }}

  #   # permissions:
  #   #   contents: 'read'
  #   #   id-token: 'write'

  #   steps:
  #     # - name: Configure GCP Credentials
  #     #   uses: nightstory/gcp-secrets-action@v1
  #     #   with:
  #     #     gcp_credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
  #     #     template_file: ./.github/template.yaml
      
  #     # - name: Authenticate to Google Cloud
  #     #   id: 'auth'
  #     #   uses: 'google-github-actions/auth@v2'
  #     #   with:
  #     #     project_id: ${{ secrets.GCP_PROJECT_ID }}
  #     #     workload_identity_provider: 'projects/343693069423/locations/global/workloadIdentityPools/github/providers/mlops'
  #     #     service_account: 'model-884@mlops-413215.iam.gserviceaccount.com'
     
  #     - name: Deploy service to Cloud Run
  #       run: |
  #           gcloud run deploy inference --image $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference --max-instances=4 --platform managed --region asia-south1 --allow-unauthenticated

  # mlops-container:
  #   runs-on: ubuntu-latest
  #   env:
  #     GCS_TRAINED_MODELS_BUCKET_URI: ${{ vars.GCS_TRAINED_MODELS_BUCKET_URI }}
  #     GCR_HOST: ${{ vars.GCR_HOST }}
  #     GCR_REPOSITORY: ${{ vars.GCR_REPOSITORY }}
  #     GCP_SERVICE_ACCOUNT_EMAIL: ${{ vars.GCP_SERVICE_ACCOUNT_EMAIL }}

  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #     - name: Checkout Reposiotry
  #       uses: actions/checkout@v4
  #       with:
  #         repository: ${{ github.repository }}
  #         ref: ${{ github.ref }}

  #     - name: Configure GCP Credentials
  #       uses: nightstory/gcp-secrets-action@v1
  #       with:
  #         gcp_credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
  #         template_file: ./.github/template.yaml
      
  #     - name: Authenticate to Google Cloud
  #       id: 'auth'
  #       uses: 'google-github-actions/auth@v2'
  #       with:
  #         project_id: ${{ secrets.GCP_PROJECT_ID }}
  #         workload_identity_provider: 'projects/343693069423/locations/global/workloadIdentityPools/github/providers/mlops'
  #         service_account: 'model-884@mlops-413215.iam.gserviceaccount.com'

  #     - name: Secrets to file
  #       uses: mobiledevops/secret-to-file-action@v1
  #       with:
  #         base64-encoded-secret: ${{ secrets.GCP_CREDENTIALS_JSON }}
  #         filename: "gcp-credentials.json"
  #         is-executable: true
  #         working-directory: "./"

  #     - name: Build Docker Image
  #       run: |
  #           echo "Trained Models Bucket URI: $GCS_TRAINED_MODELS_BUCKET_URI"

  #           COMMIT_HASH=$(git rev-parse --short HEAD)
  #           IMAGE_TAG=$(git describe --tags --always)

  #           echo "Commit Hash: $COMMIT_HASH"
  #           echo "Image Tag: $IMAGE_TAG"

  #           docker buildx build \
  #             --progress auto \
  #             --build-arg GCP_CREDENTIALS_JSON=gcp-credentials.json \
  #             --build-arg GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}" \
  #             --build-arg GCS_TRAINED_MODELS_BUCKET_URI="$GCS_TRAINED_MODELS_BUCKET_URI" \
  #             --build-arg ELASTIC_APM_SERVER_URL="${{ secrets.ELASTIC_APM_SERVER_URL }}" \
  #             --build-arg ELASTIC_APM_SECRET_TOKEN="${{ secrets.ELASTIC_APM_SECRET_TOKEN }}" \
  #             --tag inference:latest \
  #             --tag inference:$IMAGE_TAG \
  #             --tag inference:$COMMIT_HASH \
  #             -f Dockerfile .

  #           docker run -d -p 8000:8000 --name inference_container inference:latest

  #     - name: Push Docker Image to GCR
  #       run: |
  #           echo "GCR Host: $GCR_HOST"
            
  #           docker tag inference:latest $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference:latest
            
  #           docker images | grep inference
  #           gcloud auth activate-service-account --key-file=gcp-credentials.json
  #           gcloud auth configure-docker $GCR_HOST -q
  #           docker push $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference

      
  #     - name: Deploy service to Cloud Run
  #       run: |
  #           gcloud run deploy inference --image $GCR_HOST/${{ secrets.GCP_PROJECT_ID }}/$GCR_REPOSITORY/inference --max-instances=4 --platform managed --region asia-south1 --allow-unauthenticated